---
layout: post
title:  "Chapter 2 : Application Layer"
date:   2021-04-13 22:06:43 +0900
categories: jekyll update
---

## 네트워크 개요
[컴퓨터 네트워크][1]란 여러 컴퓨터 사이에서 통신망을 이용해 데이터를 주고 받을 수 있는 망(Network)를 말한다.

LAN 케이블, WIFI, 블루투스 모두 컴퓨터 통신망의 한 종류라고 말할 수 있다.

우리가 사용하는 대부분의 서비스, 카카오톡, 웹 페이지, 줌 등 모두 컴퓨터 네트워크를 이용해 통신을 하는 것이다.

### 프로토콜
프로토콜은 네트워크를 이용해 통신 할 때 컴퓨터간 데이터 통신시 미리 정해둔 **통신 규약**이다.

TCP/IP, HTTP, FTP 등 데이터를 통신 하기 위해 미리 약속한 통신 규약들이다.

이러한 프로토콜들의 디자인과 통신 방식을 계층으로 나누어 설명한 모델을 [OSI 7 Layer][2]라 말한다.

![OSI 7 Layer with TCP/IP 4 Layer](/dku-network-class-summery/assets/layer.jpg)

왼쪽 모델이 OSI 7 Layer이다.
각각 하위 계층 부터 물리(Physical), 데이터 링크(Datalink), 네트워크(Network), 전송(Transport), 세션(Session), 표현(Presentation), 응용(Application) 계층으로 분류된다.

그럼 오른쪽 모델은 무엇일까? 

현재 컴퓨터 네트워크에서 가장 많이 사용되고 기반이 되는 프로토콜은 TCP/IP이다. 때문에 오른쪽 모델은 TCP/IP의 관점에서 기존의 OSI 7 Layer를 4 Layer로 분류하여 표현하였다. 좀 더 추상적인 모델이라 할 수 있다.

![TCP/IP 4 Layer Protocol](/dku-network-class-summery/assets/layer_protocol.png)

위 사진은 인터넷 프로토콜을 특징과 디자인에 따라 TCP/IP 4 Layer로 분류한 것이다. 단순히 분류한 것만 생각하면 굳이 계층형태로 분류할 필요성이 있을까 싶다.

프로토콜을 계층별로 분류한 이유는 많은 이유가 있겠지만, 쉽게 생각할 수 있는것은 추상화이다.

하위 계층(물리 계층)으로 갈 수록 실제 물리적 자원에 가까워지고 상위 계층(응용 계층)으로 갈 수록 프로토콜은 추상화 된다. 즉, 프토토콜은 하위 계층의 프로토콜 만을 이용하고, 상위 계층의 프로토콜에게 기능을 제공하는 것이다. 아래의 이미지를 보면 쉽게 이해할 수 있다.

![OSI 7 Layer Stack](https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F99B9DA355C39CC9725)

사용자가 데이터를 전송하면 응용 계층에서 물리 계층까지 이동하면서 데이터 통신에 도움이 되는 정보(Header)가 계속해서 붙는다.

반대로 데이터를 수신 받는 측은 물리 계층에서 단순한 전자적 신호를 전송받지만, 계층이 올라갈수록 껍질이 벗겨지듯 상위 계층으로 이동하고 최종적으론 응용 계층에 도달한다.

이렇듯 OSI 7 Layer 혹은 TCP/IP 4 Layer는 각 프로토콜의 기능들을 분류하고 쉽게 추상화 할 수 있음을 알 수 있다.

### Application SW 개발 기술
네트워크를 이용한 소프트웨어를 개발할 수 있는 기술은 아주 다양하게 있다.

대표적인 예로 웹 사이트 개발을 들자면, HTML/Javascript/CSS와 같은 프론트 엔드 개발 언어들을 예로 들 수 있을것이다.

![HTML/Javascript/CSS](https://jkkim09.github.io/dku-network-class-summery/assets/images//posts/front-end/top.jpg)

이외에도 Database Server, Web Server, Distribution Server등 인터넷의 발전에 따라 네트워크를 이용한 많은 형태의 서비스와 개발 툴이 등장하고 있다.

![Backend Roadmap](/dku-network-class-summery/assets/backend_roadmap.png)
*[출처][3]*

## Architectures
컴퓨터 네트워크의 구조는 아주 다양하지만, 크게 나누면 2가지 정도로 나눌 수 있다.
1. Client-Server 방식
2. P2P(Peer-to-Peer) 방식

Client-Server 방식은 우리가 아는 고전적인 방식이다.
중앙 Server가 존재하며, 이를 다수의 Client가 접근하는 방식이다.

P2P 방식은 중앙 서버가 존재하는 대신 네트워크 상 각 노드(Peer)들들이 서버가 되어 서로간 소통을 하는 방식이다.

![Client-Server Architecture](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Client-server-model.svg/1200px-Client-server-model.svg.png)
*Client-Server Archtecture*

![P2P Architecture](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/P2P-network.svg/1200px-P2P-network.svg.png)
*P2P Architecture*

### Client-Server 아키텍처의 장단점
#### 장점
- 중앙 서버가 존재하므로 서버의 구조가 비교적 간단하다. 
- 클라이언트들에 대한 접근 제어와 추적이 쉽다.

#### 단점
- 만약 중앙 서버가 다운된다면 모든 클라이언트들은 이용에 장애가 발생한다.
- 중앙 서버에 대한 보안과 백업에 대한 비용이 추가적으로 발생한다.

### P2P 아키텍처의 장단점
#### 장점
- 중앙화 된 서버 없이 Peer간 정보 공유가 직접적으로 이루어진다.
- 한 곳에서 장애가 생기더라도 서비스 이용이 큰 문제가 없다.
- 네트워크에 대한 확장성이 크다.

#### 단점
- 특정 클라이언트에 대한 접근이 힘들다.
- 네트워크 대역폭을 가장 느린 회선에 맞추게 되어 대역폭을 제대로 활용하지 못할 수 있다.

## Cloud Computing
기존의 서버 운영 방식은 직접 서버 하드웨어와 회선을 구매하여 설치를 해야한다. 초기 비용과 확장 비용, 유지 비용등 많은 부분에서 비용이 발생하며, 수요를 예측하지 못해 서버 수용량이 부족하거나 남는등 다양한 문제가 발생할 수 있다.

클라우드 컴퓨팅은 사용자가 직접 서버를 구매하고 관리할 필요 없이 컴퓨탕 자원을 바로 제공할 수 있는 On-demand 서비스를 제공한다.

Cloud Computing 방식에는 크게 3가지 종류가 존재한다.
### 1. SaaS (Software as a Service)
SaaS는 Software as a Service의 약자로 소프트웨어나 관련 서비스는 중앙 서버에서 제어되며, 웹 브라우저와 같은 클라이언트를 통해 제공되는 모델로 주문형 소프트웨어(On-demand Software)라고도 한다.

소프트웨어를 제작 및 판매를 하거나, 전용 웹 페이지 애플리케이션을 제작해 사용자에게 서비스를 제공하는 서비스등을 말할 수 있다.


### 2. Paas (Platform as a Service)
PaaS는 Platform as a Service의 줄임말로 애플리케이션을 개발할 때 필요한 인프라를 제공하고 관리하는 서비스를 말한다.

대표적으로 구글 API, 네이버 API, 파이어베이스 등 플랫폼 서비스등을 말할 수 있다.

### 3. Iaas (Infrastructure as a Service)
IaaS는 Infrastructure as a Service의 줄임말로 서버, 네트워크, 스토리지 자원등을 사용할 수 있게 인프라를 제공하는 서비스를 말한다.

AWS, 구글 코랩, 네이버 클라우드 서비스와 같은 서비스들을 예로 들 수 있다.

![Relation of SaaS/PaaS/IaaS](https://rastalion.me/wp-content/uploads/2020/02/pngfind.com-cloud-computing-icon-png-3808820.png)
*각 서비스의 관계*

## IPC(Inter Process Commnuication)
IPC는 Inter-Process Communication의 줄임말로, 한국말로 프로세스간 통신으로 해석할 수 있다.

프로세스란 컴퓨터 위에서 실제 실행되고 처리되고 있는 프로그램을 말할 수 있다.

일반적으로 프로세스는 운영 체제에서 관리를 하고 있으며, 각 프로세스는 고유한 메모리 영역과 CPU 자원을 가지고 다른 프로세스와 격리되어 있다.
여러 프로세스는 서로간 메모리가 격리되어 있기 때문에 직접적인 메모리 접근을 통한 통신이 불가능하기 때문에 운영 체제에서는 IPC를 제공하여 프로세스간 통신을 할 수 있도록 제공하고 있다.

대표적인 IPC로는 파이프(Pipe), 공유 메모리, 소켓, 시그널 등이 있다.

엄연히 클라이언트를 통해 서버의 프로세스에 접근해서 자원을 요청하는 행위 또한 IPC이다. 이를 위해 사용되는 IPC 방식이 **소켓**이며 소켓을 통해 서버 프로세스와 통신이 가능하다.

![Electrionic Socket](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/French-power-socket.jpg/1200px-French-power-socket.jpg)
*콘센트를 꼽아 전기를 공급받는 위 물체를 소켓이라 부른다*

실제 전기적인 소켓처럼 IPC를 위한 소켓 또한 서버와 *연결*하여 데이터를 *공급*받는다고 할 수 있다.

![Network Socket](/dku-network-class-summery/assets/network_socket.png)
*Network Socket*

소켓은 응용 계층에서 하위 계층에 대해서 추상화를 한 자료 구조의 일종이라 볼 수 있다.

응용 계층에서 전송한 데이터를 하위 계층을 거쳐 서버의 소켓으로 전달한다.

## HTTP 그리고 웹
### HTTP란?
HTTP는 HyperText Transfer Protocol의 약자로 HTML 문서를 주고 받는데 주로 사용되는 프로토콜이다.[(참고)][4]

OSI 7 Layer에서 응용 계층에 위치한 프로토콜로 흔히 웹 서버를 위해 사용되는 프로토콜이며, TCP/IP를 이용해 데이터를 주고 받고 있다.

### URL/URI/URN
웹 서핑을 하면서 웹 사이트 주소는 필수적이다. 일반적으로 웹 주소는 `http://www.example.com/abc`와 같은 형태로 이루어지는데 이를 URL(Uniform Resource Locator)라 지칭한다.

즉 URL은 네트워크 상에서 자원의 위치를 정의하는데 사용되는 것이다.

URL의 일반적인 표기 방법은 아래와 같다.

`scheme://<user>:<password>@<host>:<port>/<url-path>`

우리가 일반적으로 보던 웹 주소보다 더 많은 정보를 포함할 수 있다는 사실을 알 수 있다. URL의 표기 방법에 대해서는 [RFC 1738][5]에서 정의되어 자세한 스펙을 확인할 수 있었다.

`http://www.example.com/abc`란 주소를 위 표기 방법에 대입한다면 표기 방법에 대해서 쉽게 이해할 수 있다.

먼저 **scheme**은 해당 주소가 어떤 프로토콜을 이용해 통신하는지 알린다. 예시에서는 http를 사용하였지만 FTP, telnet, mailto 등 어떠한 프로토콜도 해당 부분에 대입될 수 있다.

다음 `<user>:<password>@<host>:<port>` 부분은 네트워크 상의 위치를 말하며 일반적으로 웹 사이트에서는 user, password, port 부분은 신경을 쓰지 않아도 되지만, telnet, ssh, ftp와 같은 유저 정보를 필요로 하는 통신이라면 해당 정보들이 필요할 수 있다.

마지막 `<url-path>` 부분은 해당 네트워크 자원 내에서의 위치, 즉 컴퓨터 내의 폴더와 파일이 될 수 있다.

그렇다면 URI, URN은 무엇인가? 

각각의 철자는 Uniform Resource Indentifier 그리고 Uniform Resource Name이다.

둘 다 인터넷 상의 자원에 대한 정보를 가리킨다.

URI는 [RFC 2396][6]에 정의되어 있으며, 표현 방식은 다음과 같다.

`scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]`

URL과 상당히 유사하며 몇 가지 추가된 부분이 있다. URI는 URL과 다르게 네트워크 상 자원의 위치를 가르키는게 아니고 자원의 유일한 식별자를 제공하는 역할이다.

즉, 단순히 URL의 파일뿐만 아니라 데이터, 값, 표현식을 가리키는 식별자가 될 수 있는 URL의 상위 개념이다.

URN은 기존 URL의 문제점을 개선하기 위해 등장한 고안된 표현 방식이다. [RFC 2141][7]에 정의되어 있다.

기존 URL의 문제점은 `www.example.com/abc`라는 URL이 있다. 이는 *www.example.com* 위치에 abc라는 페이지를 가리키는 식별자이다. 만약 abc라는 페이지가 이동하여 `www.example.com/second/abc`로 이동하였다면 기존의 `www.example.com/abc`는 이용이 불가능해진다.

때문에 URN은 이러한 URL의 문제점을 해결하기 위해 위치 독립적이며 영속적인 식별자를 제공한다.

### HTTP의 연결 방식
HTTP의 통신 개념은 간단하다. 클라이언트는 필요한 데이터들의 목록을 담아 요청(Request)을 한다. 그럼 서버는 해당 요청에 대해 값을 응답(Response)하는 방식이다.

그럼 여기서 2가지 방식이 나뉘어 진다. 통신이 끝난 후 완전히 TCP 연결을 종료하거나, TCP 연결을 유지하거나.

단순히 생각하면 그냥 Request-Response 후 TCP 연결을 끊으면 되지 않느냐고 생각할 수 있지만, TCP의 연결과 종료 과정을 생각해본다면 생각이 달라진다.

TCP의 경우 연결과 종료시 3-way handshake와 4-way handshake라는 과정을 거친다. 만약 모든 HTTP Request-Response마다 이러한 과정을 매번 겪는다면 성능상에 문제가 생길 것이다. 이러한 방식을 non-persistent HTTP 방식이라 한다.

실제로 HTTP 1.0 버전에는 통신이 끝나고 나면 TCP 연결을 종료하는 non-persistent HTTP 방식을 채택하였다. 때문에 성능 이슈와 보안 이슈를 해결한 HTTP 1.1이 출시된다.

HTTP 1.1에서는 persistent HTTP 방식을 채택해 한 번의 TCP 연결에서 여러 HTTP 통신을 할 수 있었기 기존 방식에 비해 빠른 통신이 가능하다.

그럼 persistent HTTP 방식에서는 언제 연결을 종료하는가? 이는 웹 서버 프로그램의 구현 방식마다 다르다. Apache 웹 서버 프로그램에서는 기본 연결 시간은 15초로 되어 있다. 즉, 15초 후에 TCP 연결 종료가 되는 것이다.

### [HTTP Request/Response 메시지 구조][8]
위에서 언급 했듯이 HTTP는 요청(Request)과 응답(Response)로 이루어지는 통신 방식이다.

요청시 전달하는 메시지의 구조는 다음과 같다.
![HTTP Request/Response](https://mdn.mozillademos.org/files/13827/HTTPMsgStructure2.png)

HTTP 메시지는 크게 Header와 Body로 나뉘며, Header에는 HTTP 메시지 전송시 요청 정보, 상태, 호스트, 메타 데이터 등이 담기며 일반적으로 사람이 읽을 수 있는 문자로 포맷팅 된다.

#### HTTP Request
![HTTP Request Header](https://mdn.mozillademos.org/files/13821/HTTP_Request_Headers2.png)
첫 번째 줄의 첫 번째 값은 HTTP Method로 GET, POST, HEAD 등 서버에서 수행해야 할 동작을 나타낸다. 두 번째 값은 서버의 주소를 나타내며, 세 번째 값은 HTTP의 버전을 나타낸다.

두 번째 줄부터는 일반적인 헤더 값으로 \<Key>:\<Value> 형태로 ':'을 기준으로 구분되는 라인이다.

Request Header에서는 크게 3가지로 나뉘게 된다.
- Request headers : 요청에 대한 내용을 구체화하고 제약 조건을 가한다.
- General headers : 메시지 전체에 대해서 적용되는 헤더이다.
- Entity headers : 본문(body)에 대해서 적용되는 header로 본문이 없으면 전송되지 않는다. 

#### HTTP Response
![HTTP Response header](https://mdn.mozillademos.org/files/13823/HTTP_Response_Headers2.png)
HTTP Response header의 첫 번째 줄은 HTTP 버전, 상태 코드, 상태 텍스트를 나태난다.

두 번째 라인부터는 HTTP Request header와 큰 차이점이 없다. \<key>:\<value> 형태의 header 값들이 나열되어 있는걸 볼 수 있으며, 크게 3가지의 header 타입으로 분류된다.

- Response headers : 반환되는 값들에 대해서 구체화하고, 추가적인 반환 정보를 제공한다.
- Entity headers : 본문에 적용되는 header이다, 본문이 없으면 전송되지 않는다.
- General headers : 메시지 전체에 적용되는 header이다.


#### [HTTP Method][9]
HTTP Method는 리소스에 따라 서버가 수행하길 원하는 행동을 나타낸다. 아래와 같은 Method들이 존재한다.
- GET : 리소스의 표시, 반환을 요청한다.
- POST : 리소스를 제출할 때 사용한다. 서버의 부수효과가 발생할 수 있다.
- PUT : POST와 동일하게 리소스를 제출하여 리소스를 생성하거나, 기존 리소스를 대체한다. POST와의 차이점은 [멱등성][10]을 가진다.
- DELETE : 리소스를 삭제할 때 사용한다.
- HEAD : GET과 동일하지만 Response 본문을 받지 않는다.
- CONNECT : 요청된 리소스로부터 양방향 터널을 맺는다.
- OPTIONS : 서버의 상태를 질의하거나, 통신 방법을 설정할 수 있다.
- TRACE : 리소스가 요청되는 경로를 추적하여 loop-back 테스트를 진행한다.
- PATCH : 리소스의 부분적인 수정을 수행한다. 부수효과가 발생할 수 있다.

#### [HTTP Status Code][11]
HTTP Status Code(상태 코드)는 HTTP Response에 대해서 상태에 대한 코드를 나타낸다.

크게 100, 200, 300, 400, 500 단위의 상태 코드로 분류하며 각각 진행상황, 성공, 리다이렉트, 요청 실패, 서버 요청 실패로 나뉜다.

### HTTP Cookies
HTTP의 Request/Response는 stateless하다. 즉, 연결과 요청/결과에 대해서 상태를 저장하지 않는다는 것이다. 때문에 각 요청들은 격리된 요청이 되는 것이다.

HTTP 쿠키는 서버가 웹 브라우저에게 전달하는 데이터이다. 브라우저는 데이틀 저장시켜 놓았다가 동일한 서버에 요청시 해당 쿠키 값을 같이 전송한다.

### Web Cache
웹 캐시는 느린 대역폭을 가진 서버로부터 트래픽을 분산하고 사용자에게 더 빠른 응답을 위해 사용될 수 있다.

예를 들어 서버가 유럽에 있고, 한국에서 해당 서버에 요청/응답을 한다고 생각해보자. 데이터의 전송 거리가 길어질수록 데이터의 전송 시간은 오래 걸릴 것이며, 데이터의 손실또한 발생할 확률이 높아진다. 또한 서버의 로컬 네트워크의 대역폭이 좁아 한국에서 많은 요청을 못 받아들일 수 있을 것이다.

이때 한국에 해당 서버의 캐싱을 위한 프록시 서버를 두어 프록시 서버로 요청을 보내면 프록시 서버가 유럽 서버와 HTTP 통신 후 결과를 반환한다.
만약 동일한 요청이 프록시 서버로 들어온다면 프록시 서버는 기존의 통신 결과를 그대로 반환하면 된다.

2번의 요청이 동일한 결과를 반환했지만, 실제 유럽 서버와 통신한 횟수는 1회이며, 한국의 프록시 서버이기 때문에 속도도 훨씬 빠를 것이다.

## 전자 메일(E-mail, 이메일)
이메일은 인터넷을 통해 우편을 주고 받는 시스템을 말한다. 대표적으로 gmail, 네이버 메일과 같은 서비스가 존재한다.

이메일은 크게 3가지 구성 요소가 존재한다.
- User Agent : 메일을 송신하거나 읽는 개체, 사용자를 나타낸다.
- Mail Server : 메일을 수신하고 저장하는 서버를 나타낸다.
- SMTP : 메일을 송신/수신할 때 사용되는 이메일 프로토콜이다.

### SMTP(Simple Mail Transfer Protocol)
SMTP는 인터넷에서 이메일을 전송하기 위해 사용되는 프로토콜이며, TCP 25번 포트를 사용하고 있다.

SMTP는 ASCII 문자로 통신하기 때문에 ASCII 표현 범위를 벗어나는 문자나 바이너리 파일의 경우 [MIME 포맷][MIME]을 이용해 7비트로 인코딩되어 전송된다.

#### [SMTP 통신의 예][13]
SMTP는 사용자(클라이언트)와 서버간의 TCP 연결이 수립된 후 사용자가 명령어와 데이터를 제출하면 서버가 답변하는 연결 지향 프로토콜이다.

메일 서버와 연결된 후 클라이언트(C)와 서버(S)가 통신하는 과정은 아래와 같다.

```
S: 220 smtp.example.com ESMTP Postfix
C: HELO relay.example.com
S: 250 smtp.example.com, I am glad to meet you
C: MAIL FROM:<bob@example.com>
S: 250 Ok
C: RCPT TO:<alice@example.com>
S: 250 Ok
C: RCPT TO:<theboss@example.com>
S: 250 Ok
C: DATA
S: 354 End data with <CR><LF>.<CR><LF>
C: From: "Bob Example" <bob@example.com>
C: To: Alice Example <alice@example.com>
C: Cc: theboss@example.com
C: Date: Tue, 15 January 2008 16:02:43 -0500
C: Subject: Test message
C: 
C: Hello Alice.
C: This is a test message with 5 header fields and 4 lines in the message body.
C: Your friend,
C: Bob
C: .
S: 250 Ok: queued as 12345
C: QUIT
S: 221 Bye
{The server closes the connection}
```

클라이언트에서 `MAIL FROM:<bob@example.com>` 명령을 제출하여 송신자를 `bob@example.com`로 지정하고 `RCPT TO:<alice@example.com>`, `RCPT TO:<theboss@example.com>` 명령을 제출하여 수신자를 지정하였다.

DATA 명령을 제출하자 서버에서 메일의 본문을 종료하기 위한 문자를 수신하고, 클라이언트로부터 메일의 본문을 수신받는다.

마지막으로 QUIT 명령을 제출하여 연결을 종료한다.

### [POP3(Post Office Protocol 3)][14]
POP3또한 이메일에 관련된 프로토콜로 SMTP의 경우 이메일을 송신(Push)를 하기 위해 사용되는 프로토콜이라면 POP3는 이메일을 수신(Pop)하기 위해 사용되는 프로토콜이다.

gmail의 이메일 쓰기가 SMTP라면 메일함에서 메일 목록을 확인하는 것이 POP3의 기능이라 할 수 있다.

일반적인 이메일 서비스는 이메일을 수신하면 서버에 이메일을 저장하지만 POP3는 이메일을 수신하면 서버에서 이메일을 삭제한다. 반면에 IMAP과 같은 서버에 이메일을 남겨두는 등 더 복잡한 기능들을 제공한다.

## DNS(Domain Name Service)
도메인(Domain)은 IP주소를 사람이 읽기 쉬운 문자로 표현한 형태이다. IP주소는 외우기 힘들기 때문에 도메인 주소를 많이 사용한다. 


DNS는 IP주소를 도메인 주소로 변환하거나, 도메인 주소를 IP주소로 변환하는 서버/서비스를 말한다. Application 레이어에 속하며 빠른 통신을 위해 UDP 프로토콜을 사용한다.

DNS는 중앙 서버를 가지는 것이 아닌, 분산 데이터베이스 서비스 형태로 제공을 한다. 아주 많은 호스트와 도메인 네임이 존재하기 때문에 계층형 구조의 도메인 네임과 계층형 DNS 서버를 사용하는 것이다.

예를 들어 `www.example.com`이라는 도메인이 있다면 점으로 구분되어 도메인을 나타낸다. `com`은 최상위 도메인을 나타내며, `example`은 `com`의 하위 도메인(서브 도메인)이라는 것을 나타난다. 동일하게 `www`은 `example`의 하위 도메인이 된다.

이러한 구조를 이용해 도메인 서버를 분산 계층형으로 관리한다.

### Root Name Server
도메인이 IP로 변환되기 위한 가장 첫 단계를 거치는 서버로 모든 TLD를 관리하는 서버이다.

A~M까지 총 13개의 루트 네임 서버가 있으며 도메인에 대해서 적절한 TLD서버 목록을 반환하여 응답한다.

### TLD(Top-Level Domain) Server
최상위 도메인 서버를 나타낸다. 최상위 도메인은 `com`, `net`, `org`...와 같은 도메인등을 나타낸다.

### Authoritative DNS Server
실제 IP와 Domain이 매핑되어 있는 정보를 가지는 DNS 서버를 말한다.

### Local DNS Server
통신사나 기관내 설치되는 DNS 서버의 캐시 역할을 맡는다.

### 도메인 변환 과정
![Domain Transform Process](https://d1.awsstatic.com/Route53/how-route-53-routes-traffic.8d313c7da075c3c7303aaef32e89b5d0b7885e7c.png)

DNS 서버가 계층적으로 이루어져 있기 때문에 도메인이 IP로 변환되는 과정은 재귀적으로 발생한다.

1. 사용자가 www.example.com을 접속한다.
2. DNS resolver(또는 Local DNS Server 등)에서 www.example.com 주소를 확인한 후 연결되어 있는 root name server에 도메인을 전송한다.
3. root name server에서는 TLD인 .com을 보고 .com을 관리하는 TLD Server 목록을 반환한다.
4. .com을 관리하는 TLD Server로부터 .example.com을 관리하는 서버 목록을 반환 받는다.
5. .example.com을 관리하는 서버에 www.example.com 도메인 주소를 전송한다.
6. 해당 DNS 서버가 Authoriative DNS Server였기 때문에 도메인과 매핑된 IP주소를 전달 받는다.
7. DNS resolver(Local DNS Server)에서 사용자에게 IP주소를 반환하고 IP주소를 캐싱한다. 다음 www.example.com 요청이 들어오면 기존 과정 없이 바로 반환될 것이다.
8. 사용자가 전달받은 IP 주소로 웹 서버에 요청한다.
9. 웹 서버로부터 요청이 반환된다.

## CDN(Content Delivery Network)
최근의 많은 서비스들은 텍스트와 같은 정형 데이터보다는 비디오, 이미지와 같은 용량이 매우 큰 비정형 데이터를 전송한다.

대표적으로 Youtube, Netflix 등 비디오 스트리밍 서비스의 경우 비디오 전송에 매우 큰 트래픽을 사용하게 된다. 특히나 두 서비스는 사용자가 매우 많은 서비스이기에 상상을 초월하는 트래픽이 발생할 것이다.

비디오 스트리밍을 전송하는 중앙 서버에 트래픽이 집중되면 서버의 대역폭이 감당이 안되기 때문에 서비스의 품질이 저하될 것이다. 이를 위해 CDN을 사용한다.

CDN은 콘텐츠를 효율적으로 전송하기 위해 사용되는 네트워크 서비스로, 보통 CDN 제공자들은 여러 노드를 이용해 콘텐츠 전송에 사용되는 트래픽을 분산하여 전송한다. 

사용 예를 간단히 들면, Youtube에서 CDN에 영상을 업로드하면 CDN이 가진 여러 노드에 해당 영상을 전송하고 사용자가 영상을 시청하려 하면 CDN에서 데이터를 스트리밍해는 것이다.

## FTP(File Transfer Protocol)
FTP는 파일을 전송하기 위한 프로토콜으로 TCP 20, 21번 포트를 사용한다. 명령을 위한 연결을 위해 먼저 21번 포트로 연결이되며 이후 20번 포트로 데이터 전송을 위한 연결이 생성된다.

데이터 전송을 위한 연결에는 2가지 모드가 존재한다.
- Active Mode : 서버의 20번 포트로부터 클라이언트가 지정한 포트로 연결한다.
- Passive Mode : 클라이언트가 서버가 지정한 포트(eg.20)으로 연결한다.

FTP로 연결되고 나면 [FTP 명령][15]을 전달 해 서버의 컴퓨터 내 파일 목록을 조회하거나 다운로드, 업로드, 변경 등이 가능하다.

[1]: https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC
[2]: https://ko.wikipedia.org/wiki/OSI_%EB%AA%A8%ED%98%95
[3]: https://github.com/kamranahmedse/developer-roadmap
[4]: https://ko.wikipedia.org/wiki/HTTP
[5]: https://tools.ietf.org/html/rfc1738#section-3.1
[6]: https://tools.ietf.org/html/rfc2396
[7]: https://tools.ietf.org/html/rfc2141
[8]: https://developer.mozilla.org/ko/docs/Web/HTTP/Headers
[9]: https://developer.mozilla.org/ko/docs/Web/HTTP/Methods
[10]: https://ko.wikipedia.org/wiki/%EB%A9%B1%EB%93%B1%EB%B2%95%EC%B9%99
[11]: https://developer.mozilla.org/ko/docs/Web/HTTP/Status
[12]: https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies
[MIME]: https://en.wikipedia.org/wiki/MIME
[13]: https://ko.wikipedia.org/wiki/%EA%B0%84%EC%9D%B4_%EC%9A%B0%ED%8E%B8_%EC%A0%84%EC%86%A1_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C
[14]:https://ko.wikipedia.org/wiki/%ED%8F%AC%EC%8A%A4%ED%8A%B8_%EC%98%A4%ED%94%BC%EC%8A%A4_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C
[15]: https://ko.wikipedia.org/wiki/FTP_%EB%AA%85%EB%A0%B9%EC%96%B4_%EB%AA%A9%EB%A1%9D